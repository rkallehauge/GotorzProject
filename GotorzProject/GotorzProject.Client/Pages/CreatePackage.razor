@page "/CreatePackage"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@* @rendermode InteractiveWebAssembly *@

@using GotorzProject.Shared.DataTransfer
@using System.Text.Json.Serialization
@using System.Web

@inject HttpClient Http

<GotorzProject.Client.Action.AuthCheck/>

<h3>Create Package</h3>

@*Departure Country*@
<div>
	<label for="country">Choose departure country:</label>
	<AutoComplete 
	@bind-Value="departureCountry"
	TItem="Country"
	DataProvider="CountryProvider"
	PropertyName="Name"
	Placeholder="Select departure country"
	OnChanged="(Country selected) => OnDepartureCountryChanged(selected)"
	>

	</AutoComplete>
</div>

@*Departure City*@
<div class="Choose departure city">
	<label for="city">Choose departure city:</label>
	<AutoComplete 
	@bind-Value="departureCity"
	TItem="City"
	DataProvider="FromCityProvider"
	PropertyName="Name"
	Placeholder="Select departure city"
	OnChanged="(City selected) => OnDepartureCityChanged(selected)">
	</AutoComplete>
</div>

@*Departure Date - Moved to flight search*@
@* <div class="Choose Departure date">
	<label for="departure">Choose departure date</label>
	<input id="departureDate" type="datetime-local" @bind="departureDate" />
</div> *@

@*Destination Country*@
@* <div class="Choose destination country">
	<label for="country">Choose destination country:</label>
	<select id="country" @onchange="OnDestinationCountryChanged">
		<option value="">Select a country</option>
		@foreach (var country in countries)
		{
			<option value="@country.Value">@country.Key</option>
		}
	</select>
</div> *@

<label for="country">Choose destination country:</label>
<AutoComplete @bind-Value="destinationCountry"
TItem="Country"
DataProvider="CountryProvider"
PropertyName="Name"
Placeholder="Select departure country"
OnChanged="(Country selected) => OnDestinationCountryChanged(selected)">

</AutoComplete>

<div class="Choose destination city">
	<label for="city">Choose destination city:</label>
	<AutoComplete @bind-Value="destinationCity"
	TItem="City"
	DataProvider="ToCityProvider"
	PropertyName="Name"
	Placeholder="Select departure city"
	OnChanged="(City selected) => OnDestinationCityChanged(selected)">
	</AutoComplete>
</div>

@*Flight Search*@
<div>

	<label>From</label>
	<input @bind-value="From" />

	<label>To</label>
	<input @bind-value="To" />

	<label>Departure date</label>
	<input type="date" @onchange="flightDepartureChanged" min="@MinimumDate" placeholder="@MinimumDate" />

	<label>Return date</label>
	<input type="date" min="@MinimumDate" @onchange="flightReturnChanged" placeholder="@MinimumDate" />

	<button @onclick="Check">Search Flight</button>

	@if (Flights != null)
	{
		<div>
			<label>Sort by</label>
			<!-- If we had more time, we would add sorting functionality -->

			<select class="flightoffers" @onchange="selectFlightHandler">

				@foreach (var flight in Flights)
				{
					@* Horrible visualization method, fix in soon future*@
					<option value="@flight.Identifier">
						<GotorzProject.Client.Component.FlightOffer FlightDTO="flight" />
					</option>
				}

			</select>
		</div>
	}
	@if (Loading)
	{
		<Spinner />
	}
</div>

@*Hotel*@
<div class="Choose Hotel">
	<label for="hotel">Choose hotel:</label>
	<select id="hotel" @bind="hotel">
		<option value="">Select a hotel</option>
		@foreach (var hotel in hotels)
		{
			<option value="@hotel">@hotel</option>
		}
	</select>
</div>

@*CheckIn*@
<div class="Choose check in"
	<label for="return">Choose check in</label>
	<input id="returnDate" type="datetime-local" @onchange="OnHotelCheckInTimeChanged"/>
</div>

@*CheckOut*@
<div class="Choose check out"
	<label for="return">Choose check out</label>
	<input id="returnDate" type="datetime-local" @onchange="OnHotelCheckOutTimeChanged"/>
</div>

@*Return Date - Return date in flight search suffices*@
@* <div class="Choose return date"
	<label for="return">Choose return date</label>
	<input id="returnDate" type="datetime-local" @bind="returnDate"/>
</div> *@

<div>
	<button class="styled-button" @onclick="CreateTravelPackage">Create Package</button>
</div>

<div>
	<h4>Package Details</h4>
	<p>@packageInfo</p>
</div>

<style>
	div {
	margin-bottom: 15px;
	}
	.styled-button{
	border: 2px solid black;
	padding: 10px 20px;
	background-color: #4CAF50;
	cursor: pointer;
	}

	.flightoffers > div:nth-child(even){
	background-color:gray;
	}
</style>


@code {
	private string departureCountry;
	private string departureCity;
	private string hotel;
	private double price;
	private string destinationCountry;
	private string destinationCity;
	private string packageInfo;


	private DateTime departureDate = DateTime.Now;
	private DateTime returnDate = DateTime.Now;

	private DateTime checkIn = DateTime.Now;
	private DateTime checkOut = DateTime.Now;

	private BaseFlightDTO? selectedFlight = default!;

	private List<Country> countries = new();

	private List<City> departureCities = new List<City>();
	private List<City> destinationCities = new List<City>();
	private List<string> hotels = new List<string>();
	private string errorMessage;

	private bool Loading = false;
	private string MinimumDate = DateTime.Now.ToString("yyyy-MM-dd");
	public DateOnly SelectedDate { get; set; }

	public List<BaseFlightDTO> Flights { get; set; } = default!;

	public string From { get; set; }
	public string To { get; set; }

	private void flightDepartureChanged(ChangeEventArgs e){
		departureDate = DateTime.Parse(e.Value.ToString());
		checkIn = DateTime.Parse(e.Value.ToString());
	}

	private void flightReturnChanged(ChangeEventArgs e){
		returnDate = DateTime.Parse(e.Value.ToString());
		checkOut = DateTime.Parse(e.Value.ToString());
	}


	private async Task OnHotelCheckInTimeChanged(ChangeEventArgs e)
	{
		checkIn = DateTime.Parse(e.Value.ToString());

		hotels = await LoadHotelsFromCity(destinationCity, destinationCountry);
	}

	private async Task OnHotelCheckOutTimeChanged(ChangeEventArgs e)
	{
		checkOut = DateTime.Parse(e.Value.ToString());
		hotels = await LoadHotelsFromCity(destinationCity, destinationCountry);
	}


	private async Task<AutoCompleteDataProviderResult<Country>> CountryProvider(AutoCompleteDataProviderRequest<Country> request)
	{

		if(countries.Count==0){
			Console.WriteLine("Yep yep");
		}

		Console.WriteLine(request.Filter.Value);
		Console.WriteLine(countries.Count);
		return await Task.FromResult(request.ApplyTo(countries.OrderBy(country => country.Name)));
	}

	private async Task<AutoCompleteDataProviderResult<City>> FromCityProvider(AutoCompleteDataProviderRequest<City> request)
	{
		return await Task.FromResult(request.ApplyTo(departureCities));
	}

	private async Task<AutoCompleteDataProviderResult<City>> ToCityProvider(AutoCompleteDataProviderRequest<City> request)
	{
		return await Task.FromResult(request.ApplyTo(destinationCities));
	}

	private async Task Check()
	{
		Loading = true;

		Console.WriteLine($"api/Flights/Single?from={From}&to={To}&departure={SelectedDate.ToString("yyyy-MM-dd")}");
		var response = await Http.GetAsync($"api/Flights/Single?from={From}&to={To}&departure={SelectedDate.ToString()}");
		Loading = false;
		try{
			Flights = await response.Content.ReadFromJsonAsync<List<BaseFlightDTO>>();
		} catch (Exception e){
			Console.WriteLine("Stuff happend");
		}
	}

	//Gemmer valgt afrejseland
	private async Task OnDepartureCountryChanged(Country country)
	{
		departureCities = await LoadCitiesFromCountry(country.IsoCode);
	}

	//Gemmer valgt destinationsland
	private async Task OnDestinationCountryChanged(Country country)
	{
		destinationCities = await LoadCitiesFromCountry(country.IsoCode);
	}

	//Gemmer valgt hotel
	private async Task OnDestinationCityChanged(City city)
	{

		To = city.Name;
	}

	//Overfører valgt afrejse by til flight søgning
	private void OnDepartureCityChanged(City city)
	{
		From = city.Name;
	}



	//Henter en liste af byer fra et land
	private async Task<List<City>> LoadCitiesFromCountry(string country)
	{
		var response = await Http.GetFromJsonAsync<List<string>>($"api/Location/getCities?country={country}");

		var result = new List<City>();
		foreach (var i in response) {
			result.Add(new City { Name = i });
		}
		return result;
	}

	//Fetching hotels from selected city
	private async Task<List<string>> LoadHotelsFromCity(string destinationCity, string destinationCountry)
	{
		Console.WriteLine("yes?");
		if (string.IsNullOrEmpty(destinationCity) || string.IsNullOrEmpty(destinationCountry))
		{
			Console.WriteLine("Destination city or country was empty.");
			return new List<string>();
		}

		if (checkIn < DateTime.Today || checkIn >= checkOut)
		{
			Console.WriteLine("Invalid check-in or check-out date.");
			return new List<string>(); // we cant allow malformed message to be sent to server, s this will cause a crash
		}

		string formattedCheckIn = checkIn.ToString("yyyy-MM-dd");
		string formattedCheckOut = checkOut.ToString("yyyy-MM-dd");

		// Console.WriteLine($"Req hotels for location: {encodedCountry}, {encodedCity}, Check in: {formattedCheckIn}, check out: {formattedCheckOut}");

		Console.WriteLine("please god work");

		var location = HttpUtility.UrlEncode($"{countries.FirstOrDefault(x => x.IsoCode == destinationCountry).Name} {destinationCity}");

		var response = await Http.GetFromJsonAsync<List<Hotel>>($"api/Hotel/GetHotels?location={location}&checkIn={formattedCheckIn}&checkOut={formattedCheckOut}");

		var result = response.Select(hotel => hotel.Name).ToList();

		return result ?? new List<string>();

	}

	private void selectFlightHandler(ChangeEventArgs e){
		string flightToken = e.Value.ToString();
		selectedFlight = Flights.Find((flight) => flight.Identifier == flightToken);
		Console.WriteLine(selectedFlight.Identifier);
	}


	//Opret pakke
	private async Task CreateTravelPackage()
	{
		var travelPackage = new TravelPackageDTO(){
			DestinationCity = destinationCity,
			DestinationCountry = destinationCountry,
			Hotel = hotel,
			Price = price,
			DepartureDate = departureDate,
			ReturnDate = returnDate,

		};

		var response = await Http.PostAsJsonAsync("api/TravelPackages/createPackage", travelPackage);

		if (response.IsSuccessStatusCode)
		{
			packageInfo = $"Pacakge created for {travelPackage.DestinationCity}, {travelPackage.DestinationCountry}";
		}
		else
		{
			packageInfo = "Failed to create package";
		}
	}

	protected override async Task OnInitializedAsync()
	{
		if(Http.BaseAddress!=null){
			var response = await Http.GetAsync(Http.BaseAddress+"api/Location/GetCountries");
			if (response.IsSuccessStatusCode)
			{
				var res = await response.Content.ReadFromJsonAsync<List<Country>>();
				// bit weird but alas
				countries = res;

			}
		}
	}

	public class City{
		public string Name { get; set; }
	}

	public class Country
	{
		[JsonPropertyName("name")]
		public string Name { get; set; }

		[JsonPropertyName("isoCode")]
		public string IsoCode { get; set; }

		[JsonPropertyName("flag")]
		public string Flag { get; set; }

		[JsonPropertyName("phonecode")]
		public string PhoneCode { get; set; }

		[JsonPropertyName("currency")]
		public string Currency { get; set; }

		[JsonPropertyName("latitude")]
		public string Latitude { get; set; }

		[JsonPropertyName("longitude")]
		public string Longitude { get; set; }

	}

	public class TotalPrice
	{
		public double Value { get; set; }
		public string Currency { get; set; }
	}

	public class PricePerNight
	{
		public double Value { get; set; }
		public string Currency { get; set; }
	}

	public class Hotel
	{
		public string Name { get; set; }
		public string Beds { get; set; }
		public TotalPrice TotalPrice { get; set; }
		public PricePerNight PricePerNight { get; set; }
		public double Rating { get; set; }
		public string RatingDesc { get; set; }
		public int RatingAmount { get; set; }
		public string ImageSource { get; set; }
	}

	public class HotelList
	{
		public List<Hotel> Hotels { get; set; }
	}


}
