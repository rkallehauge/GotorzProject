@page "/CreatePackage"
@rendermode InteractiveWebAssembly

<h3>Create Package</h3>

<div class="Choose country">
	<label for="country">Choose a country:</label>
	<select id="country" @bind="selectedCountry">
		@foreach (var country in countries)
		{
			<option value="@country">@country</option>
		}
	</select>
</div>

<div class="Choose city">
	<label for="city">Choose a city:</label>
	<select id="city" @bind="selectedCity">
		<option value="">Select a ciyt</option>"
		@foreach (var city in cities)
		{
			<option value="@city">@city</option>
		}
	</select>
</div>

<div>
	<button class="styled-button" @onclick="CreateTravelPackage">Create Package</button>
</div>

<div>
	<h4>Package Details</h4>
	<p>@packageInfo</p>
</div>

<style>
	div {
	margin-bottom: 15px;
	}
	.styled-button{
	border: 2px solid black;
	padding: 10px 20px;
	background-color: #4CAF50;
	cursor: pointer;
	}
</style>


@code {
	private string selectedCountry;
	private string selectedCity;
	private string packageInfo;
	private List<string> countries = new List<string>();
	private List<string> cities = new List<string>();

	[Inject]
	private HttpClient Http { get; set; }

	private async Task OnCountriesChanged(ChangeEventArgs e)
	{
		selectedCountry = e.Value.ToString();
		await LoadCitiesForCountry(selectedCountry);
	}

	//Hent byer for et givent land
	private async Task LoadCitiesForCountry(string country)
	{
		var response = await Http.GetFromJsonAsync<List<string>>($"https://country-state-city-search-rest-api.p.rapidapi.com/allcountries={country}");

		if (response != null)
		{
			cities = response;
		}
		else
		{
			cities.Clear();
		}

	}

	//Opret pakke
	private async Task CreateTravelPackage()
	{
		var travelPackage = new TravelPackage(selectedCity, selectedCountry);

		var response = await Http.PostAsJsonAsync("api/TravelPackages", travelPackage);

		if (response.IsSuccessStatusCode)
		{
			packageInfo = $"Pacakge created for {travelPackage.DestinationCity}, {travelPackage.DestinationCountry}";
		}
		else
		{
			packageInfo = "Failed to create package";
		}
	}

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine(Http.BaseAddress);

		return;

		var response = await Http.GetStringAsync("api/Location/GetCountries"); 
		
		if (response.IsSuccessStatusCode)
		{
			countries = await response.Content.ReadFromJsonAsync<List<string>>();
		}
	}


	public class TravelPackage
	{
		
		public int Id { get; set; }
		public string DestinationCity { get; set; }
		public string DestinationCountry { get; set; }
		public string Hotel { get; set; }
		public double Price { get; set; }
		public DateTime Departure { get; set; }
		public DateTime Return { get; set; }

		//Midlertidig constructor med begrænset info
		public TravelPackage(string destinationCity, string destinationCountry)
		{
			DestinationCity = destinationCity;
			DestinationCountry = destinationCountry;
		}

		//Den egentlige constructor, når page virker
		public void UpdatedTravelPackage(int paymentID, string destinationCity, string destinationCountry, string hotel, double price, DateTime departure, DateTime @return)
		{
			DestinationCity = destinationCity;
			DestinationCountry = destinationCountry;
			Hotel = hotel;
			Price = price;
			Departure = departure;
			Return = @return;
		}
	}
}
