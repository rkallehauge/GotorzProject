@page "/CreatePackage"
@* @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false)) *@
@rendermode InteractiveWebAssembly

@using GotorzProject.Shared.DataTransfer
@using System.Text.Json.Serialization


@inject HttpClient Http

<h3>Create Package</h3>

<div class="Choose depature country">
	<label for="country">Choose departure country:</label>
	<select id="country" @onchange="OnDepartureCountryChanged">
		<option value="">Select a country</option>
		@foreach (var country in countries)
		{
			<option value="@country.Value">@country.Key</option>
		}
	</select>
</div>

<div class="Choose departure city">
	<label for="city">Choose departure city:</label>
	<select id="city" @bind="departureCity">
		<option value="">Select a city</option>"
		@foreach (var city in departureCities)
		{
			<option value="@city">@city</option>
		}
	</select>
</div>

<div class="Choose destination country">
	<label for="country">Choose destination country:</label>
	<select id="country" @onchange="OnDestinationCountryChanged">
		<option value="">Select a country</option>
		@foreach (var country in countries)
		{
			<option value="@country.Value">@country.Key</option>
		}
	</select>
</div>

<div class="Choose destination city">
	<label for="city">Choose destination city:</label>
	<select id="city" @bind="destinationCity">
		<option value="">Select a city</option>"
		@foreach (var city in destinationCities)
		{
			<option value="@city">@city</option>
		}
	</select>
</div>

<div>
	<button class="styled-button" @onclick="CreateTravelPackage">Create Package</button>
</div>

<div>
	<h4>Package Details</h4>
	<p>@packageInfo</p>
</div>

<style>
	div {
	margin-bottom: 15px;
	}
	.styled-button{
	border: 2px solid black;
	padding: 10px 20px;
	background-color: #4CAF50;
	cursor: pointer;
	}
</style>


@code {
	private string depatureCountry;
	private string departureCity;
	private string destinationCountry;
	private string destinationCity;
	private string packageInfo;
	private Dictionary<string, string> countries = new();


	private List<string> departureCities = new List<string>();
	private List<string> destinationCities = new List<string>();
	private string errorMessage;



	private async Task OnDepartureCountryChanged(ChangeEventArgs e)
	{
		depatureCountry = e.Value.ToString();
		departureCities = await LoadCitiesFromCountry(depatureCountry);

	}
	private async Task OnDestinationCountryChanged(ChangeEventArgs e)
	{
		destinationCountry = e.Value.ToString();
		destinationCities = await LoadCitiesFromCountry(destinationCountry);
	}

	//Henter en liste af byer fra et land
	private async Task<List<string>> LoadCitiesFromCountry(string country)
	{
		var response = await Http.GetFromJsonAsync<List<string>>($"api/Location/getCities?country={country}");

		return response;

	}

	//Opret pakke
	private async Task CreateTravelPackage()
	{
		var travelPackage = new TravelPackageDTO(){
			DestinationCity = "",
			DestinationCountry = "",
			Departure = new()
			// todo : tilføj resten
		};

		var response = await Http.PostAsJsonAsync("api/TravelPackages/createPackage", travelPackage);

		if (response.IsSuccessStatusCode)
		{
			packageInfo = $"Pacakge created for {travelPackage.DestinationCity}, {travelPackage.DestinationCountry}";
		}
		else
		{
			packageInfo = "Failed to create package";
		}
	}

	protected override async Task OnInitializedAsync()
	{
		if(Http.BaseAddress!=null){
			var response = await Http.GetAsync(Http.BaseAddress+"api/Location/GetCountries");
			if (response.IsSuccessStatusCode)
			{
				var res = await response.Content.ReadFromJsonAsync<List<Country>>();

				foreach(var country in res){
					countries.Add(country.Name, country.IsoCode);
				}
				
			}
		}
	}

	public class Country
	{
		[JsonPropertyName("name")]
		public string Name { get; set; }

		[JsonPropertyName("isoCode")]
		public string IsoCode { get; set; }

		[JsonPropertyName("flag")]
		public string Flag { get; set; }

		[JsonPropertyName("phonecode")]
		public string PhoneCode { get; set; }

		[JsonPropertyName("currency")]
		public string Currency { get; set; }

		[JsonPropertyName("latitude")]
		public string Latitude { get; set; }

		[JsonPropertyName("longitude")]
		public string Longitude { get; set; }

	}

}
