@using GotorzProject.Shared
@using GotorzProject.Client.Component
@using GotorzProject.Shared.DataTransfer
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization

@page "/administrationpakke"
@rendermode InteractiveWebAssembly

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@*The AuthenticationStateProvider is injected to get the current authentication state.*@
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http



<h3>AdministrationPakke</h3>
<p>Welcome to the AdministrationPakke page!</p>
<p>This page is for managing custom packages.</p>
@if (isAuthorized)
{
    <h4>Custom Packages</h4>
    @if (customPackages != null && customPackages.Count > 0)
    {
        <ul>
            @foreach (var package in customPackages)
            {
                <li>@package.Name - @package.Description</li>
                <button @onclick="() => CompleteCustomPackage(package)">Complete</button>
                <button @onclick="() => DeleteCustomPackage(package.Id)">Delete</button>
            }
        </ul>
    }
    else
    {
        <p>No custom packages available.</p>
    }
}
else
{
    <p>You are not authorized to view this page.</p>
}

@code {
    private bool isAuthorized = false;
    private List<CustomPackageDTO> customPackages = new List<CustomPackageDTO>();

    protected override async Task OnInitializedAsync()
    {
        // Check authorization first
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            isAuthorized = user.IsInRole("employee") || user.IsInRole("admin");
        }

        if (!isAuthorized)
        {
            NavigationManager.NavigateTo("/unauthorized");
            return; // Exit early if not authorized
        }

        // If authorized, load the custom packages
        await GetCustomPackages();
    }

    private async Task GetCustomPackages()
    {
        // Fetch custom packages from the API
        var response = await Http.GetAsync("api/custompackages");
        if (response.IsSuccessStatusCode)
        {
            var packages = await response.Content.ReadFromJsonAsync<List<CustomPackageDTO>>();
            if (packages != null)
            {
                customPackages = packages;
            }
            else
            {
                Console.WriteLine("No custom packages found");
            }
        }
        else
        {
            Console.WriteLine("Error fetching custom packages");
        }
    }

    private async Task CompleteCustomPackage(CustomPackageDTO customPackage)
    {
        var response = await Http.PostAsJsonAsync("api/custompackages/complete", customPackage);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Custom package completed successfully");
            // Refresh the list after completion
            await GetCustomPackages();
        }
        else
        {
            Console.WriteLine("Error completing custom package");
        }
    }

    private async Task CreateCustomPackage(CustomPackageDTO customPackage)
    {
        var response = await Http.PostAsJsonAsync("api/custompackages", customPackage);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Custom package created successfully");
            // Refresh the list after creation
            await GetCustomPackages();
        }
        else
        {
            Console.WriteLine("Error creating custom package");
        }
    }

    private async Task DeleteCustomPackage(int customPackageId)
    {
        var response = await Http.DeleteAsync($"api/custompackages/{customPackageId}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Custom package deleted successfully");
            // Refresh the list after deletion
            await GetCustomPackages();
        }
        else
        {
            Console.WriteLine("Error deleting custom package");
        }
    }
}
