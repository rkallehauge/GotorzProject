@using GotorzProject.Shared.DataTransfer
@using System.Text.Json.Serialization

@inject HttpClient httpClient

@if(CurrentUser != null)
{
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Currently editing @CurrentUser.FirstName @CurrentUser.LastName</h5>
            <EditForm Model="CurrentUser" OnValidSubmit="UpdateUser">
                <DataAnnotationsValidator />
                <ValidationSummary />

                @*   
                <div class="form-group">
                    <label for="email">Email address</label>
                    <InputText Id="email" class="form-control" @bind-Value="CurrentUser.Email" />
                    <ValidationMessage For="@(() => CurrentUser.Email)" />
                </div> 
                *@

                <div class="form-group">
                    <label for="firstname">Email</label>
                    <p>@CurrentUser.Email</p>
                    <small>Email has to be changed by contacting IT</small>
                </div>


                <div class="form-group">
                    <label for="firstname">First name</label>
                    <InputText Id="firstname" class="form-control" @bind-Value="CurrentUser.FirstName" />
                    <ValidationMessage For="@(() => CurrentUser.FirstName)" />
                </div>

                <div class="form-group">
                    <label for="lastname">Last name</label>
                    <InputText Id="lastname" class="form-control" @bind-Value="CurrentUser.LastName" />
                    <ValidationMessage For="@(() => CurrentUser.LastName)" />
                </div>

                <div class="form-group">
                    <label for="address">Address</label>
                    <InputText Id="address" class="form-control" @bind-Value="CurrentUser.Address" />
                    <ValidationMessage For="@(() => CurrentUser.Address)" />
                </div>

                <div class="form-group">
                    <label for="country">Country</label>
                    <AutoComplete 
                    @bind-Value="CurrentUser.Country"
                    TItem="Country"
                    DataProvider="CountryDataProvider"
                    PropertyName="Name"
                    Placeholder="Select a country..."
                    OnChanged="(Country country) => OnAutoCompleteChanged(country)" />
                    >

                </div>

                @if(userRoles.Count!=0){
                    <div class="form-group">
                        <h4>User roles for @CurrentUser.FirstName</h4>
                        @foreach(var role in userRoles.Keys){
                            <label>@role</label>
                            <Switch @bind-Value="userRoles[role]"/>
                        }
                    </div>
                }

                <button type="submit" class="btn btn-primary">Submit</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <Spinner />
}
@code {
    [Parameter]
    public UserDTO CurrentUser { get; set; }

    [Parameter]
    public EventCallback<bool> UserEdited { get; set; }



    public List<Country> countries = new();

    // User role selection
    public Dictionary<string, bool> userRoles { get; set; } = new();

    private async Task UpdateUser()
    {
        CurrentUser.Roles.Clear();

        foreach(var role in userRoles){
            if (role.Value) CurrentUser.Roles.Add(role.Key);
        }

        await UserEdited.InvokeAsync(true);
    }

    private void OnAutoCompleteChanged(Country country)
    {
        CurrentUser.Country = country.Name;
    }

    private async Task<AutoCompleteDataProviderResult<Country>> CountryDataProvider(AutoCompleteDataProviderRequest<Country> request)
    {
        return await Task.FromResult(request.ApplyTo(countries.OrderBy(country=> country.Name)));
    }



    protected override async Task OnInitializedAsync(){
        if(httpClient.BaseAddress != null){

            var countriesResponse = await httpClient.GetAsync("api/Location/GetCountries");
            countries = await countriesResponse.Content.ReadFromJsonAsync<List<Country>>();



            var rolesResponse = await httpClient.GetAsync("api/User/GetRoles");
            rolesResponse.EnsureSuccessStatusCode();


            var allRoles = await rolesResponse.Content.ReadFromJsonAsync<List<string>>();

            foreach(var role in allRoles)
            {
                bool userHasRole = CurrentUser.Roles.Contains(role);

                userRoles.Add(role,userHasRole);
                Console.WriteLine($"User:{CurrentUser.Email} Role:{role} HasRole:{userHasRole}");
            }
        } else{
            Console.WriteLine("Pulling harder on lawnmower start cord...");
        }
    }

    public class Country
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("isoCode")]
        public string IsoCode { get; set; }

        [JsonPropertyName("flag")]
        public string Flag { get; set; }

        [JsonPropertyName("phonecode")]
        public string PhoneCode { get; set; }

        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonPropertyName("latitude")]
        public string Latitude { get; set; }

        [JsonPropertyName("longitude")]
        public string Longitude { get; set; }

    }

}
